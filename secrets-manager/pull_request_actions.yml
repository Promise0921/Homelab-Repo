name: Terraform plan and apply    ##This is optional
on:                     # Not optional(Required)
  workflow_dispatch:    # This is an event to allow workflow to be triggered manually
  push:                 # Define the event that triggers the workflow automatically
    branches:           # Define the target
      - master
      #- test          # This is to show that multiple branches can be targeted for a specific event trigger

  pull_request:
    branches:
      - master 
      #- test -         # This is to show that multiple branches can be targeted for a specific event trigger

# Defining the variables on a workflow level
env: 
  TERRAFORM_VERSION: 1.7.2
  TERRAGRUNT_VERSION: 0.56.0
  TERRAFORM_WORKING_DIR: './applied/qa/ec2'

permissions:            # This will use the token in the code to run
  contents: write
  pull-requests: read
  issues: write

concurrency: Cloudenviroment      # This ensures that only a single workflow will run at a time

# This groups together all the jobs that run in the workflow file.
jobs:             # first job                  
  plan:                          
    name: "Terragrunt Init, validate and Plan"
    if: github.event_name == 'pull_request'       # The conditional statement: If the event that triggers my workflow is a pull request then GitHub actions will run the workflow
    runs-on: ubuntu-24.04         # ubuntu-latest can also be used  
    defaults:
      run:
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
    steps: 
      - name: "Checkout"                         
        uses: actions/checkout@v4  # This clones the repo to the ubuntu server
        with:                      # This switches (checkout) to the appropriate branch
          ref: ${{ github.event.pull_request.head.ref }}          # Switches to the head-ref branch

# Installing terraform to the ubuntu server
      - name: "Install Terraform"
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}             ## Referencing the environment variable
          terraform_wrapper: true

# Installing terragrunt to the ubuntu server
      - name: "Install Terragrunt"
        uses: autero1/action-terragrunt@v3
        with:
          terragrunt-version: ${{ env.TERRAGRUNT_VERSION }}             ## Referencing the environment variable

# Configuring the AWS credential using key ID and access key
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
        env: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
      - name: "Terragrunt init"
        id: init
        run: terragrunt run-all init -no-color --terragrunt-non-interactive  ## -no-color: don't apply any color to the output: Plain output 
                                                                             ## --terragrunt-non-interactive: This is an automation - Default to yes, no human interaction needed

      - name: "Terragrunt Validate"
        id: validate
        run: terragrunt run-all validate -no-color --terragrunt-non-interactive    

      - name: "Terragrunt Plan"
        id: plan
        run: terragrunt run-all plan -no-color --terragrunt-non-interactive      
        continue-on-error: true       ## If there is an error, provide the error message                                                        

# The second job "Init and Apply"
  apply:
    name: "Terragrunt Apply"
    if: github.event_name == 'push'
    runs-on: ubuntu-24.04         # ubuntu-latest can also be used  
    defaults:
      run:
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
    steps: 
      - name: "Checkout"                         
        uses: actions/checkout@v4  # This clones the repo to the ubuntu server
        with:                      # This switches (checkout) to the appropriate branch
          ref: ${{ github.ref }}          # Switches to the ref branch

# Installing terraform to the ubuntu server
      - name: "Install Terraform"
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: true

# Installing terragrunt to the ubuntu server
      - name: "Install Terragrunt"
        uses: autero1/action-terragrunt@v3
        with:
          terragrunt-version: ${{ env.TERRAGRUNT_VERSION }}

# Configuring the AWS credential using key ID and access key
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
        env: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
      - name: "Terragrunt init"
        id: init
        run: terragrunt run-all init -no-color --terragrunt-non-interactive  ## -no-color: don't apply any color to the output: Plain output 
                                                                             ## --terragrunt-non-interactive: This is an automation - Default to yes, no human interaction needed    
      - name: "Terragrunt Apply"
        id: apply
        run: terragrunt run-all apply -no-color --terragrunt-non-interactive      
        continue-on-error: true       ## If there is an error, provide the error message

# # This will destroy everything 
#       - name: "Terragrunt Destroy"
#         id: destroy
#         run: terragrunt run-all destroy -no-color --terragrunt-non-interactive      
#         continue-on-error: true        
