# Run on call from another workflow

on:
  workflow_call:                # This must be present for this to be a reusable workflow
    inputs:
      TERRAFORM_VERSION:
        description: "Terraform version to be installed on the runner(Ubuntu server)"
        required: true
        type: string

      TERRAGRUNT_VERSION:
        description: "Terragrunt version to be installed on the runner(Ubuntu server)"
        required: true
        type: string

      TERRAFORM_WORKING_DIR:
        description: "Path to the terraform configuration files"
        required: true
        type: string

      AWS_REGION:
        required: true
        type: string

      ENVIRONMENT_NAME:
        description: " The enviroment to use in running the workflows"
        required: true
        type: string

jobs:                             
  plan:                          
    name: "Terragrunt Init, validate and Plan"
    environment: ${{ inputs.ENVIRONMENT_NAME }}
    if: github.event_name == 'pull_request'       # The conditional statement: If the event that triggers my workflow is a pull request then GitHub actions will run the workflow
    runs-on: ubuntu-24.04                          # ubuntu-latest can also be used  
    defaults:
      run:
        working-directory: ${{ inputs.TERRAFORM_WORKING_DIR }}
    steps: 
      - name: "Checkout"                         
        uses: actions/checkout@v4  # This clones the repo to the ubuntu server
        with:                      # This switches (checkout) to the appropriate branch
          ref: ${{ github.event.pull_request.head.ref }}          # Switches to the head-ref branch

# Installing terraform to the ubuntu server
      - name: "Install Terraform"
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.TERRAFORM_VERSION }}             ## Referencing the environment variable
          terraform_wrapper: true

# Installing terragrunt to the ubuntu server
      - name: "Install Terragrunt"
        uses: autero1/action-terragrunt@v3
        with:
          terragrunt-version: ${{ inputs.TERRAGRUNT_VERSION }}             ## Referencing the environment variable

# Configuring the AWS credential using key ID and access key
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.AWS_REGION }}
        env: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
      - name: "Terragrunt init"
        id: init
        run: terragrunt run-all init -no-color --terragrunt-non-interactive  ## -no-color: don't apply any color to the output: Plain output 
                                                                             ## --terragrunt-non-interactive: This is an automation - Default to yes, no human interaction needed

      - name: "Terragrunt Validate"
        id: validate
        run: terragrunt run-all validate -no-color --terragrunt-non-interactive    

      - name: "Terragrunt Plan"
        id: plan
        run: terragrunt run-all plan -no-color --terragrunt-non-interactive      
        continue-on-error: true       ## If there is an error, provide the error message  



